{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport { applySnapshot, types } from 'mobx-state-tree';\nvar store = null;\nvar Store = types.model({\n  foo: types.number,\n  lastUpdate: types.Date,\n  light: false\n}).actions(function (self) {\n  var timer;\n\n  var start = function start() {\n    timer = setInterval(function () {\n      // mobx-state-tree doesn't allow anonymous callbacks changing data.\n      // Pass off to another action instead (need to cast self as any\n      // because typescript doesn't yet know about the actions we're\n      // adding to self here)\n      ;\n      self.update();\n    }, 1000);\n  };\n\n  var update = function update() {\n    self.lastUpdate = new Date(_Date$now());\n    self.light = true;\n  };\n\n  var stop = function stop() {\n    clearInterval(timer);\n  };\n\n  return {\n    start: start,\n    stop: stop,\n    update: update\n  };\n});\nexport var initializeStore = function initializeStore(isServer) {\n  var snapshot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n  if (isServer) {\n    store = Store.create({\n      foo: 6,\n      lastUpdate: _Date$now(),\n      light: false\n    });\n  }\n\n  if (store === null) {\n    store = Store.create({\n      foo: 6,\n      lastUpdate: _Date$now(),\n      light: false\n    });\n  }\n\n  if (snapshot) {\n    applySnapshot(store, snapshot);\n  }\n\n  return store;\n};","map":{"version":3,"sources":["/Users/bfeele900/Documents/dev/lobbygg-next/stores/store.ts"],"names":["applySnapshot","types","store","Store","model","foo","number","lastUpdate","Date","light","actions","self","timer","start","setInterval","update","stop","clearInterval","initializeStore","isServer","snapshot","create"],"mappings":";AAAA,SACIA,aADJ,EAKIC,KALJ,QAMO,iBANP;AAQA,IAAIC,KAAa,GAAG,IAApB;AAEA,IAAMC,KAAK,GAAGF,KAAK,CACdG,KADS,CACH;AACHC,EAAAA,GAAG,EAAEJ,KAAK,CAACK,MADR;AAEHC,EAAAA,UAAU,EAAEN,KAAK,CAACO,IAFf;AAGHC,EAAAA,KAAK,EAAE;AAHJ,CADG,EAMTC,OANS,CAMD,UAAAC,IAAI,EAAI;AACb,MAAIC,KAAJ;;AAEA,MAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAChBD,IAAAA,KAAK,GAAGE,WAAW,CAAC,YAAM;AACtB;AACA;AACA;AACA;AACA;AAAEH,MAAAA,IAAD,CAAcI,MAAd;AACJ,KANkB,EAMhB,IANgB,CAAnB;AAOH,GARD;;AAUA,MAAMA,MAAM,GAAG,SAATA,MAAS,GAAM;AACjBJ,IAAAA,IAAI,CAACJ,UAAL,GAAkB,IAAIC,IAAJ,CAAS,WAAT,CAAlB;AACAG,IAAAA,IAAI,CAACF,KAAL,GAAa,IAAb;AACH,GAHD;;AAKA,MAAMO,IAAI,GAAG,SAAPA,IAAO,GAAM;AACfC,IAAAA,aAAa,CAACL,KAAD,CAAb;AACH,GAFD;;AAIA,SAAO;AAAEC,IAAAA,KAAK,EAALA,KAAF;AAASG,IAAAA,IAAI,EAAJA,IAAT;AAAeD,IAAAA,MAAM,EAANA;AAAf,GAAP;AACH,CA7BS,CAAd;AAmCI,OAAO,IAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAACC,QAAD,EAAwC;AAAA,MAApBC,QAAoB,uEAAT,IAAS;;AACnE,MAAID,QAAJ,EAAc;AACVjB,IAAAA,KAAK,GAAGC,KAAK,CAACkB,MAAN,CAAa;AAAEhB,MAAAA,GAAG,EAAE,CAAP;AAAUE,MAAAA,UAAU,EAAE,WAAtB;AAAkCE,MAAAA,KAAK,EAAE;AAAzC,KAAb,CAAR;AACH;;AACD,MAAKP,KAAD,KAAmB,IAAvB,EAA6B;AACzBA,IAAAA,KAAK,GAAGC,KAAK,CAACkB,MAAN,CAAa;AAAEhB,MAAAA,GAAG,EAAE,CAAP;AAAUE,MAAAA,UAAU,EAAE,WAAtB;AAAkCE,MAAAA,KAAK,EAAE;AAAzC,KAAb,CAAR;AACH;;AACD,MAAIW,QAAJ,EAAc;AACVpB,IAAAA,aAAa,CAACE,KAAD,EAAQkB,QAAR,CAAb;AACH;;AACD,SAAOlB,KAAP;AACH,CAXM","sourcesContent":["import {\n    applySnapshot,\n    Instance,\n    SnapshotIn,\n    SnapshotOut,\n    types,\n} from 'mobx-state-tree'\n  \nlet store: IStore = null as any\n  \nconst Store = types\n    .model({\n        foo: types.number,\n        lastUpdate: types.Date,\n        light: false,\n    })\n    .actions(self => {\n        let timer: number\n\n        const start = () => {\n            timer = setInterval(() => {\n                // mobx-state-tree doesn't allow anonymous callbacks changing data.\n                // Pass off to another action instead (need to cast self as any\n                // because typescript doesn't yet know about the actions we're\n                // adding to self here)\n                ;(self as any).update()\n            }, 1000)\n        }\n\n        const update = () => {\n            self.lastUpdate = new Date(Date.now())\n            self.light = true\n        }\n\n        const stop = () => {\n            clearInterval(timer)\n        }\n\n        return { start, stop, update }\n    })\n\n    export type IStore = Instance<typeof Store>\n    export type IStoreSnapshotIn = SnapshotIn<typeof Store>\n    export type IStoreSnapshotOut = SnapshotOut<typeof Store>\n\n    export const initializeStore = (isServer: boolean, snapshot = null) => {\n        if (isServer) {\n            store = Store.create({ foo: 6, lastUpdate: Date.now(), light: false })\n        }\n        if ((store as any) === null) {\n            store = Store.create({ foo: 6, lastUpdate: Date.now(), light: false })\n        }\n        if (snapshot) {\n            applySnapshot(store, snapshot)\n        }\n        return store\n    }\n  "]},"metadata":{},"sourceType":"module"}
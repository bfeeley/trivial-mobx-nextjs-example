{"version":3,"file":"static/webpack/static/development/pages/_app.js.67d63e19b3ee64819dd7.hot-update.js","sources":["webpack:///./pages/_app.tsx"],"sourcesContent":["import React from 'react'\nimport App, { AppContext, AppInitialProps } from 'next/app'\nimport { Provider } from 'mobx-react'\nimport { getSnapshot } from 'mobx-state-tree'\nimport { ThemeProvider } from 'styled-components'\nimport Header from '../components/header'\nimport { initializeStore, IStore } from '../stores/store'\n\ntype IOwnProps = {\n    isServer: boolean\n    initialState: IStore\n}\n\nconst theme = {\n    colors: {\n        primary: '#0070f3'\n    }\n}\n\nclass MyApp extends App {\n    public static async getInitialProps({ Component, router, ctx }: AppContext) {\n      //\n      // Use getInitialProps as a step in the lifecycle when\n      // we can initialize our store\n      //\n      const isServer = typeof window === 'undefined'\n      const store = initializeStore(isServer)\n      //\n      // Check whether the page being rendered by the App has a\n      // static getInitialProps method and if so call it\n      //\n      let pageProps = {}\n      if (Component.getInitialProps) {\n            pageProps = await Component.getInitialProps(ctx)\n      }\n      return {\n        initialState: getSnapshot(store),\n        isServer,\n        pageProps,\n      }\n    }\n  \n    private store: IStore\n  \n    constructor(props: any) {\n      super(props)\n      this.store = initializeStore(props.isServer, props.initialState) as IStore\n    }\n  \n    public render() {\n        const { Component, pageProps } = this.props\n        return (\n            <Provider store={this.store}>\n                <ThemeProvider theme={theme}>\n                    <Header />\n                    <Component {...pageProps} />\n                </ThemeProvider>\n            </Provider>\n        )\n    }\n  }\n  \nexport default MyApp\n\n// const App = ({ Component, pageProps }: AppContext & AppInitialProps) => {\n//     const getInitialProps = async ({ Component, ctx}) => {\n//         const isServer = typeof window === 'undefined'\n//         const store = initializeStore(isServer)\n//         if (Component.getInitialProps) {\n//             pageProps = await Component.getInitialProps(ctx)\n//         }\n//         return {\n//             initialState: getSnapshot(store),\n//             isServer,\n//             pageProps\n//         }\n//     }\n    \n//     return (\n//         <ThemeProvider theme={theme}>\n//             <Header />\n//             <Component {...pageProps} />\n//         </ThemeProvider>\n//     )\n// }\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AADA;AADA;AACA;AAKA;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;;;;;;AACA;AACA;;AADA;AACA;;AACA;AACA;AACA;AACA;AAHA;AACA;;;;;;;;;;;;;;;;;AAQA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AACA;AACA;AAFA;AAGA;AACA;;;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;AAxCA;AACA;AA0CA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}